// <auto-generated />
using System;
using ChessGame.Data;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

namespace ChessGame.Data.Migrations
{
    [DbContext(typeof(AppDbContext))]
    partial class AppDbContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "3.1.12")
                .HasAnnotation("Relational:MaxIdentifierLength", 128)
                .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

            modelBuilder.Entity("ChessGame.Data.Contracts.Entities.Game", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int?>("BlackPlayerId")
                        .HasColumnType("int");

                    b.Property<DateTime>("Date")
                        .HasColumnType("datetime2");

                    b.Property<string>("OpeningClassification")
                        .IsRequired()
                        .HasColumnType("nvarchar(3)")
                        .HasMaxLength(3);

                    b.Property<string>("Result")
                        .IsRequired()
                        .HasColumnType("nvarchar(7)");

                    b.Property<int?>("WhitePlayerId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("BlackPlayerId");

                    b.HasIndex("WhitePlayerId");

                    b.ToTable("Games");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            BlackPlayerId = 2,
                            Date = new DateTime(2021, 2, 5, 1, 31, 42, 643, DateTimeKind.Local).AddTicks(5374),
                            OpeningClassification = "A10",
                            Result = "1-0",
                            WhitePlayerId = 1
                        },
                        new
                        {
                            Id = 2,
                            BlackPlayerId = 3,
                            Date = new DateTime(2021, 2, 5, 1, 31, 42, 646, DateTimeKind.Local).AddTicks(7547),
                            OpeningClassification = "B13",
                            Result = "1-0",
                            WhitePlayerId = 1
                        },
                        new
                        {
                            Id = 3,
                            BlackPlayerId = 3,
                            Date = new DateTime(2021, 2, 6, 1, 31, 42, 646, DateTimeKind.Local).AddTicks(7709),
                            OpeningClassification = "E03",
                            Result = "0.5-0.5",
                            WhitePlayerId = 2
                        },
                        new
                        {
                            Id = 4,
                            BlackPlayerId = 2,
                            Date = new DateTime(2021, 2, 6, 1, 31, 42, 646, DateTimeKind.Local).AddTicks(7764),
                            OpeningClassification = "F17",
                            Result = "1-0",
                            WhitePlayerId = 1
                        },
                        new
                        {
                            Id = 5,
                            BlackPlayerId = 2,
                            Date = new DateTime(2021, 2, 15, 1, 31, 42, 646, DateTimeKind.Local).AddTicks(7806),
                            OpeningClassification = "B17",
                            Result = "1-0",
                            WhitePlayerId = 2
                        });
                });

            modelBuilder.Entity("ChessGame.Data.Contracts.Entities.Player", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("FirstName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("LastName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("Rating")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.ToTable("Players");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            FirstName = "John",
                            LastName = "Smith",
                            Rating = 100
                        },
                        new
                        {
                            Id = 2,
                            FirstName = "Joanne",
                            LastName = "Doe",
                            Rating = 200
                        },
                        new
                        {
                            Id = 3,
                            FirstName = "Silviu",
                            LastName = "Zaharia",
                            Rating = 200
                        });
                });

            modelBuilder.Entity("ChessGame.Data.Contracts.Entities.Game", b =>
                {
                    b.HasOne("ChessGame.Data.Contracts.Entities.Player", "BlackPlayer")
                        .WithMany()
                        .HasForeignKey("BlackPlayerId");

                    b.HasOne("ChessGame.Data.Contracts.Entities.Player", "WhitePlayer")
                        .WithMany()
                        .HasForeignKey("WhitePlayerId");
                });
#pragma warning restore 612, 618
        }
    }
}
